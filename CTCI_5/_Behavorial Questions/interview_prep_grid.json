{
    "Project 1: Traveltile": {
        "Challenges": {
            "Answer": "This is the largest Javascript project that I tried to do so far, and there were many aspects of the project that I could barely fathom in the beginning. This project used React.js, Express.js, PostgreSQL, various third-party APIs such as the Google Maps and Filestack API, linter files, design frameworks such as Material-UI, etc. Figuring out what things I needed to know was difficult. Understanding the React philosophy took a while; learning how to use setState and passing props/children as well as routing was a challenge, and only as I approached the end of the app build process did I feel like I mastered its understanding.",
        },
        "Mistakes/Failures": {
            "Answer": "One of the biggest failures of the app is that it needs to be run on a particular port of a server; this pain point meant that instead of hosting my app on an app engine like Heroku or Elastic Beanstalk, I needed to get a full-fledged VM on DigitalOcean in order to run my app. Another large mistake was the non-use of server-side rendering; this problem came to light when I couldn't pass a File object from my front-end to my back-end, and thus needed to resort to the very expensive Filestack API instead of the much cheaper S3, as the AWS SDK only works for Node.js and can only be used in the back-end. I also spent copious amounts of time learning about resources that I didn't need; I spent a full day learning Redux and Mocha/Chai for app-wide state stores and testing purposes, which I didn't need to incorporate into my app in the end.",
        },
        "Enjoyed": {
            "Answer": "The best part about this app was being able to build something that I could be proud of, and that could be globally accessible at the touch of a button. As an college student, a lot of my projects for my electrical engineering major were research or class-based, and making it look nice and work flawlessly came second to learning and understanding the material. Additionally, since these were class projects to be used every year and for many students, they couldn't be published for everyone to see. This project made me feel for the first time that I could really be a software engineer in the real world.",
        },
        "Leadership": {
            "Answer": "I came up with this idea from my trip to Asia this past summer with my friends; I realized that trip planning is an exhausting and thankless task, and since you're likely to only go on a particular trip once, the effort you spend planning doesn't carry over to anything. Additionally, travel agencies appeared to only cater to wealthier clients (not college students), and since I'm very forgetful, I wanted a way to remember the trip by. The app that I built more or less captures my vision for what trip planning could be like in the future; an online or mobile tile that can be readily edited, recommended, and shared among friends.",
        },
        "Conflicts": {
            "Answer": "I made this app by myself with the support of one of my best friends, who commented a lot on my pull requests about issues he saw in my codebase. I was worried that he was being very nitpicky about my code; every comma, every semicolon, every const and let, every naming convention out of place was nabbed. I gradually understood that professional code is held up to a very high standard, the higher the better, but it was very difficult to find everything; I usually programmed in an IDE, not a text editor like I do today, so syntax issues were normally caught by someone else. Then I discovered linter files and that made the standardization issues much easier to deal with.",
        },
        "What You'd do differently": {
            "Answer": "I would spend more time learning about Express.js and how server-side rendering works, then build my backend first before building my frontend. I would tie in my app with an online app engine such as Heroku or Elastic Beanstalk, and iterate and deploy my app to the app engine instead of just testing locally so that there aren't any hiccups when publishing the app to the web. Finally, I would seek to master usage of AWS S3 or a similar cloud storage service, and build out the file upload functionality early on.",
        },
    },
    "Project 2: DukeMakers": {
        "Challenges": {
            "Answer": "This was my first time creating and leading an organization with members of this caliber and with this much resources, and I was fairly intimidated. One of the earliest difficulties was dealing with the various administrations on campus. Our student government does not fund newly recognized student organizations, and caps next-year funding at $500. We managed to raise over $10,000 through our alumni contacts, but we had a hairy encounter with our university's alumni gifts departments during the transfer. In response, we actively sought out adminstration officials and frequently lobbied them for cooperation and support; we recieved some support from a handful of faculty and staff, and were able to represent ourselves at several Duke-themed events, including the 75th Anniversary Gala for our engineering school.

            Another big challenge was the nature of 3D printing at the time of our club's conception. Good 3D printers cost sigificant six figures, and even printers that don't break that often cost several thousand dollars. Patent protection of 3D printing protection delayed deployment of affordable, good 3D printers. Without working equipment, it was exceedingly difficult to keep club members engaged and participating every week. Finally, 3D printing as a technology is intended for use with other technologies to serve a higher purpose, similar to other manufacturing technologies. Ultimately, we transitioned from maintaining a makerspace to focusing on team-based 3D printing-related projects, with our school's IT innovation department developing a campus-wide makerspace. In doing so, we were able to prevent maintenance and upkeep costs from eating into our budget, while preserving a sense of community and growth in our club.",
        },
        "Mistakes/Failures": {
            "Answer": "One challenge was understanding the trajectory of our club's growth. In the beginning, flush with cash and new energy from our members and our executive staff, we were kept extremely busy with growth. In one notable week, we had two-hour meetings six days from the seven, and two meetings on one particular day. I got addicted to fast growth and desired to keep expanding the club. However, as semesters rolled on and club growth stabilized, the difference between what we have begun and what we completed grew exponentially. Eventually, many of our initiatives came to naught and many club members stopped showing up. We ended up having to consolidate our considerable assets into a smaller number of projects that we could reasonably complete within a semester.",
        },
        "Enjoyed": {
            "Answer": "DukeMakers made me realize that I really could become a leader in the real world, and that all it took to become a leader was to be somebody worth following. With the rest of the club, we were able to build a community of makers on campus, just like we said we would, and we were able to secure 3D printing as a pivotal part of campus life at Duke. Today, students can go into the Innovation Studio and 3D print whatever they want for free, and students can also take introductory engineering classes on 3D printing. It makes me feel like we made a difference, and made our campus into a better place to be.",
        },
        "Leadership": {
            "Answer": "I came up with the idea of creating a 3D printing club after working as an undergraduate research assistant at Oakland University, creating Simulink algorithms for industrial robot path planning. The robot we had at the lab was locked using a DRM and we needed to pay the holding company $3000 in licensing fees in order to use it. I ended up finishing my research position before the robot was unlocked, and was so frustrated by the lack of progress that I resolved to make my own robot. I looked online at simple but effective manufacturing techniques, and I discovered 3D printing. I looked into it some more and discovered that low-cost 3D printers were available, and I thought it would be possible to build an organization on campus that services 3D printers. The first time that I applied to the student government to recognize a club, I was rejected; then one of my friends introduced me to someone who would become one of my best friends, who had experience building startups; with his help, the club got its footing, and the rest is history.",
        },
        "Conflicts": {
            "Answer": "The running of the club, especially during the expanding phase, along with the curriculum workload was insanely stressful, and there were many times when executive members clashed on major decisions. One major decision was whether to purchase MendelMax 1.5s printers (open source, cheap, but little documentation and potentially unworkable), or MakerBot Replicator 2s (expensive, closed source, but worked very well). Since we had a lot of members demonstrate interest, I pushed for the larger number of printers. Since the Makerbots were tested and owned by one of our members already, some other board members pushed for the Makerbots. Ultimately, we arrived at a compromise solution, where we would purchase some SoliDoodle 4s (cheaper, closed source 3D printers) and some MendelMaxes.",
        },
        "What You'd do differently": {
            "Answer": "I would definitely get the executive team more involved in hands-on work; I've learned that being present in the member's projects helped boost morale, improved team cohesion, and made us better leaders since we knew what was going on. I would improve logistics and maintenance, since having the resources on hand when club members came in to work on projects shouldn't be question. Lastly, I would maintain a fewer but higher quality philosophy in staffing, membership, equipment, and spaces, since a small team that's passionate about what they do exists longer and moves faster than a larger, more uncommitted team.",
        },
    },
    "Project 3: Treetime": {
        "Challenges": {
            "Answer": "Treetime was my first real Javascript app, and I desired first and foremost to create an app that I could be proud of. That meant an app with excellent design, interactivity, and usefulness. I focused on exactly none of those things in my previous projects, and this app sought to do all three. Eventually, through the use of browser APIs, jQuery, and some HTML/CSS styling, I was able to cobble together something that looked like what I envisioned.",
        },
        "Mistakes/Failures": {
            "Answer": "One notable failure was my lack of planning in developing the notifications portion of the application. Unfortunately, I didn't realize that the Notifications API was only recently released, and that support for the API was non-uniform across browsers. For example, Google Chrome (before Chrome 52) had a bug where a Notification would appear twice if I activated the timer, while Google Chrome Canary didn't. I opted to simply wait for Canary's updates to be written into the production version of Chrome, since the Notifications portion of the app was crucial to its workings and since it was dependent on the browser, not the app itself.",
        },
        "Enjoyed": {
            "Answer": "I discovered many positive attributes of web applcations during the creation of this app. I liked how I could use the application I built immediately, how it stayed available when I closed or restarted my computer, and how it was available anywhere I could access a web browser. If I made a change in the app, I only needed to push the changes to GitHub in order to see the change take place on my devices. Finally, I made an app that I could be proud of. Those are privileges that I didn't have when working in solely Python, C++, Java, or Golang.",
        },
        "Leadership": {
            "Answer": "I came up with the idea of Treetime from the Forest app on my iPhone, which sets a timer and denies use of the phone for the duration that the timer is active. I liked this method because I sometimes have a problem with fiddling, and actively denying use of the resource makes it more clear to me what I should focus on. I tried to find the Forest app on Chrome, but it only came as an extension instead of a full web application. I decided to try my hand at making a similar timer to see if I could create a similar experience.",
        },
        "Conflicts": {
            "Answer": "One question was how complicated to make the app. I wanted to be proud of the application I built so that I would believe that this was the path for me, but I also knew that my Javascript knowledge was limited and so was my time. For example, when the user initiates the timer, he or she plants a tree, and when the user navigates off the page for a given amount of time, the tree they planted dies. I was conflicted whether I should load a simple image of a tree that's dead and one that's alive, or whether I should use a procedural generation engine to create the tree. Ultimately, I settled for using images of trees created using procedural generation, as a way to provide unique images without incurring the complexity penalty of using a full procedural generator in the backend.",
        },
        "What You'd do differently": {
            "Answer": "If I had to make Treetime again using the knowledge I had today, I would pursue the course of making it a desktop app (perhaps using Electron, the open-source cross-platform desktop framework by GitHub). This would enable me to better control the environment it's used in, without having to worry about cross-browser compatibility issues as much, and perhaps establish a set API for notifications. I would use an existing Javascript framework and route to different pages instead of loading everything at once and overlaying items with differing opacities on top of each other.",
        },
    },
}
